name: Build and Deployment
on:
  push:
    branches:
      - master
    paths-ignore:
      - "**.md"

jobs:
  build_web:
    name: Build flutter web
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: subosito/flutter-action@v1
      with:
        channel: "dev"
    - run: flutter pub get
    - run: flutter config --enable-web
    - run: flutter build web --dart-define=OS_MAPS_API_KEY=${{ secrets.OS_MAPS_API_KEY }} --dart-define=OS_MAP_STYLE=${{ secrets.OS_MAP_STYLE }}
    - name: Archive production artifact
      uses: actions/upload-artifact@v2
      with:
        name: web-build
        path: build/web
  # build_ios:
  #   name: Build flutter iOS
  #   runs-on: macOS-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: subosito/flutter-action@v1
  #     with:
  #       channel: 'stable'
  #   - run: flutter pub get
  #   - run: flutter clean
  #   # TODO: Ensure to build a signed IPA with provisioning profile
  #   - name: Build ipa
  #     run: |
  #       mkdir $HOME/secrets
  #       gpg --quiet --batch --yes --decrypt --passphrase="$SECRET_PASSPHRASE" \
  #       --output $HOME/secrets/secrets.tar secrets.tar.gpg
  #       tar xvf $HOME/secrets/secrets.tar
  #       flutter build ios --no-codesign --dart-define=OS_MAPS_API_KEY=${{ secrets.OS_MAPS_API_KEY }} --dart-define=OS_MAP_STYLE=${{ secrets.OS_MAP_STYLE }}
  #       mkdir -p Payload
  #       mv build/ios/iphoneos/Runner.app Payload
  #       zip -r -y Payload.zip Payload/Runner.app
  #       mv Payload.zip build/ios/Runner.ipa
  #       rm -rf Payload
  #     env:
  #       SECRET_PASSPHRASE: ${{ secrets.SECRET_PASSPHRASE }}
  #   - name: Upload ipa
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: ios-build
  #       path: build/ios/Runner.ipa
  build_apk:
    name: Build flutter Android
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"
      - run: flutter pub get
      - run: flutter clean
      - name: Build APK
        run: |
          mkdir $HOME/secrets
          gpg --quiet --batch --yes --decrypt --passphrase="$SECRET_PASSPHRASE" \
          --output $HOME/secrets/secrets.tar secrets.tar.gpg
          tar xvf $HOME/secrets/secrets.tar
          flutter build apk --dart-define=OS_MAPS_API_KEY=${{ secrets.OS_MAPS_API_KEY }} --dart-define=OS_MAP_STYLE=${{ secrets.OS_MAP_STYLE }}
        env:
          SECRET_PASSPHRASE: ${{ secrets.SECRET_PASSPHRASE }}
      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: apk-build
          path: build/app/outputs/apk/release
  deploy_web:
    name: Deploy web to firebase hosting
    needs: build_web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download artifact for deployment
        uses: actions/download-artifact@v2
        with:
          name: web-build
          path: web-build
      - name: Deploy web-build to firebase
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting --public web-build
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          PROJECT_ID: default
  # deploy_ios_beta:
  #   name: Upload ios-build to firebase app distribution
  #   needs: [build_ios]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Download artifact for deployment
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: ios-build
  #       path: ios-build
  #   - name: Upload ipa to firebase app distribution
  #     uses: wzieba/Firebase-Distribution-Github-Action@v1
  #     with:
  #       appId: ${{secrets.FIREBASE_IOS_APP_ID}}
  #       token: ${{secrets.FIREBASE_TOKEN}}
  #       groups: testers
  #       debug: true
  #       file: ios-build/Runner.ipa
  deploy_android_beta:
    name: Deploy Android APK to firebase app distribution
    needs: [build_apk]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Download artifact for deployment
      uses: actions/download-artifact@v2
      with:
        name: apk-build
        path: apk-build
    - name: Upload APK to firebase app distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{secrets.FIREBASE_ANDROID_APP_ID}}
        token: ${{secrets.FIREBASE_TOKEN}}
        groups: testers
        debug: true
        file: apk-build/app-release.apk
